// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  profilePic    String?
  name          String
  email         String    @unique
  role          Role      @default(User)
  posts         Post[]
  Comment       Comment[]
  Shelter       Shelter[]
  shelterFollow String[]  @default([]) @db.ObjectId
  following     Shelter[] @relation("Followers", fields: [shelterFollow], references: [id])
}

model Shelter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  country       String?  @map("country")
  city          String?  @map("city")
  // tiro una default img para los shelters. dsp en un futuro la cambiamos al logo de nuestra pag ~bau
  profilePic    String?  @default("https://64.media.tumblr.com/3ec5ecbbeb64030986df7251019ae4b8/b797bc944c5153a1-8e/s1280x1920/bb3c049643d41fa2ccf7442ebfc4d630a95489d6.jpg") @map("profilePic")
  description   String?  @map("description")
  address       String?  @map("address")
  website       String?  @map("website")
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String   @db.ObjectId
  budget        Int?     @map("budget")
  goal          Int?     @map("goal")
  userFollowers String[] @default([]) @db.ObjectId
  followers     User[]   @relation("Followers", fields: [userFollowers], references: [id])
  posts         Post[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?   @db.ObjectId
  content   String    @map("content")
  image     String?   @map("image")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Int?      @default(0)
  Comment   Comment[]
  shelterId String    @db.ObjectId
  shelter   Shelter   @relation(fields: [shelterId], references: [id])
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  content  String @map("content")
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])
  postId   String @db.ObjectId
}

enum Role {
  User
  Admin
}
